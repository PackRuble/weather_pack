import 'dart:io';

import 'package:interact/interact.dart';
import 'package:weather_pack/weather_pack.dart';

// TODO: If you do not use the `--define="API_WEATHER=YOUR_APIKEY"` flag,
//  provide the key here instead of 'null'
const String _apiKey = null ?? String.fromEnvironment('API_WEATHER');

final _wService = WeatherService(_apiKey, language: WeatherLanguage.russian);
final _gService = GeocodingService(_apiKey);

/// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
Future<void> getWeather() async {
  stdout.writeln(' ‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–≥–æ–¥–Ω—ã–π —Å–µ—Ä–≤–∏—Å! ‚ú® \n');

  await _checkApiKey(_apiKey);

  bool isRepeat = true;

  do {
    PlaceGeocode? city;
    do {
      final String desiredPlace = _inputCity();
      city = await _selectCity(desiredPlace);
    } while (city == null);

    final _TypeWeather typeWeather = _selectTypeWeather();

    await _getWeather(city, typeWeather);

    isRepeat = _repeat();
  } while (isRepeat == true);

  exit(0);
}

Future<void> _checkApiKey(String apiKey) async {
  final bool isCorrectApiKey = await OWMApiTest().isCorrectApiKey(_apiKey);

  if (isCorrectApiKey) {
    stdout.writeln(' üóù –ö–ª—é—á –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–º–∫–∞ ^_~');
  } else {
    stdout.writeln(' ‚ùå Api-–∫–ª—é—á –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç!');
    exit(1);
  }
}

enum _TypeWeather {
  hourly('–ü–æ—á–∞—Å–æ–≤–∞—è –ø–æ–≥–æ–¥–∞'),
  current('–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞'),
  daily('–ü–æ–≥–æ–¥–∞ –Ω–∞ 7 –¥–Ω–µ–π'),
  alerts('–ü–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è'),
  all('–í—Å–µ –¥–∞–Ω–Ω—ã–µ');

  const _TypeWeather(this.name);

  final String name;
}

bool _repeat() {
  return Confirm(
    prompt: '–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –¥—Ä—É–≥–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è?',
    defaultValue: true,
    waitForNewLine: true,
  ).interact();
}

Future<PlaceGeocode?> _selectCity(String desiredPlace) async {
  final spinner = Spinner(
    icon: ' üè° ',
    rightPrompt: (done) => done
        ? '–í—ã –≤–≤–µ–ª–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'
        : '–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π...',
  ).interact();

  final List<PlaceGeocode> places =
      await _gService.getLocationByCityName(desiredPlace);

  spinner.done();

  if (places.isEmpty) {
    stdout.writeln('–ù–æ "$desiredPlace" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ <(Ôºø„ÄÄÔºø)>');
    return null;
  }

  final index = Select(
    prompt: '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞?',
    options: places.map((PlaceGeocode place) {
      final result = StringBuffer();

      if (place.countryCode != null) {
        result.write('${place.countryCode}: ');
      }

      if (place.state != null) {
        result.write('${place.state}, ');
      }

      if (place.name != null) {
        result.write('${place.name}');
      }

      return result.toString();
    }).toList(),
  ).interact();

  return places[index];
}

/// –ü–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É.
String _inputCity() {
  final input = Input(
    prompt: '–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ?',
  ).interact();

  if (input.isEmpty) {
    final isResume = Confirm(
      prompt: '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?',
      defaultValue: true,
      waitForNewLine: true,
    ).interact();

    return isResume ? _inputCity() : exit(0);
  } else {
    return input;
  }
}

/// –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
_TypeWeather _selectTypeWeather() {
  final index = Select(
    prompt: '–ö–∞–∫–∏–µ –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å?',
    options: _TypeWeather.values.map((e) => e.name).toList(),
    initialIndex: 1,
  ).interact();

  return _TypeWeather.values[index];
}

/// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É [WeatherCurrent].
Future<WeatherCurrent> _getWeatherCurrent(PlaceGeocode city) async {
  return _wService.currentWeatherByLocation(
    latitude: city.latitude ?? 0.0,
    longitude: city.longitude ?? 0.0,
  );
}

/// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É [WeatherOneCall].
Future<WeatherOneCall> _getWeatherOneCall(PlaceGeocode city) async {
  return _wService.oneCallWeatherByLocation(
    latitude: city.latitude ?? 0.0,
    longitude: city.longitude ?? 0.0,
  );
}

/// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
Future<void> _getWeather(PlaceGeocode city, _TypeWeather typeWeather) async {
  final gift = Spinner(
    icon: ' üå§ ',
    rightPrompt: (done) =>
        done ? '–í–æ—Ç –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ' : '–ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...',
  ).interact();

  late WeatherCurrent current;
  late WeatherOneCall oneCall;

  if (typeWeather == _TypeWeather.current) {
    current = await _getWeatherCurrent(city);
  } else {
    oneCall = await _getWeatherOneCall(city);
  }

  gift.done();

  switch (typeWeather) {
    case _TypeWeather.hourly:
      _printHourly(oneCall.hourly);
      break;
    case _TypeWeather.current:
      _printCurrent(current);
      break;
    case _TypeWeather.daily:
      _printDaily(oneCall.daily);
      break;
    case _TypeWeather.alerts:
      _printAlerts(oneCall.alerts);
      break;
    case _TypeWeather.all:
      _printAlerts(oneCall.alerts);
      _printHourly(oneCall.hourly);
      _printDaily(oneCall.daily);
      break;
  }
}

void _printAlerts(List<WeatherAlert>? alerts) {
  if (alerts?.isEmpty ?? true) {
    stdout.writeln('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ—Ç');
    return;
  }
  stdout.writeln('====================');
  for (final a in alerts!) {
    stdout.write('''
–°–æ–±—ã—Ç–∏–µ:   ${a.event}
–û–ø–∏—Å–∞–Ω–∏–µ:  ${a.description}
–ù–∞—á–∞–ª–æ:    ${a.start}
–û–∫–æ–Ω—á–∞–Ω–∏–µ: ${a.end}
=====
''');
  }
}

void _printDaily(List<WeatherDaily>? daily) {
  if (daily?.isEmpty ?? true) {
    stdout.writeln('–ü–æ–≥–æ–¥–∞ –Ω–∞ 7 –¥–Ω–µ–π -> –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
    return;
  }

  stdout.writeln('====================');
  for (final d in daily!) {
    stdout.write('''
${d.date!.day}.${d.date!.month}.${d.date!.year}
${d.weatherDescription}
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ( —É—Ç—Ä–æ–º: ${d.tempMorning} K, –¥–Ω—ë–º: ${d.tempDay} K, –≤–µ—á–µ—Ä–æ–º: ${d.tempEvening} K, –Ω–æ—á—å—é: ${d.tempNight} K )
–í–æ—Å—Ö–æ–¥ –∏ –∑–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞ ( ${d.sunrise} --> ${d.sunset} )
–í–æ—Å—Ö–æ–¥ –∏ –∑–∞–∫–∞—Ç –ª—É–Ω—ã   ( ${d.moonrise} --> ${d.moonset} )
–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ ( ${d.windSpeed} –º/—Å )
–î–∞–≤–ª–µ–Ω–∏–µ  ( ${d.pressure} –≥–ü–∞ )
–í–ª–∞–∂–Ω–æ—Å—Ç—å ( ${d.humidity} % )
–£–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å ( ${d.uvi} )
–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ ( ${d.pop} % )
=====
''');
  }
}

void _printHourly(List<WeatherHourly>? hourly) {
  if (hourly?.isEmpty ?? true) {
    stdout.writeln('–ü–æ—á–∞—Å–æ–≤–∞—è –ø–æ–≥–æ–¥–∞ -> –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
    return;
  }

  stdout.writeln('====================');
  for (final h in hourly!) {
    final date =
        ' ${h.date?.day.toString().padLeft(2, '0')}.${h.date?.month.toString().padLeft(2, '0')} ${h.date?.hour.toString().padLeft(2, '0')}:00';

    stdout.write('''
 ($date ${h.weatherMain?.padRight(20)} ${h.temp.toString().padRight(6, '0')} K, ${h.pop.toString().padRight(4, '0')} % –æ—Å–∞–¥–∫–æ–≤ )
''');
  }
}

void _printCurrent(WeatherCurrent current) {
  final DateTime? date = current.date;

  const pressureUnits = Pressure.mmHg;
  const tempUnits = Temp.celsius;
  const speedUnits = Speed.kph;

  final temp = tempUnits.valueToString(current.temp!, 2);
  final tempFeelsLike = tempUnits.valueToString(current.tempFeelsLike!, 2);

  final windSpeed = speedUnits.valueToString(current.windSpeed!, 1);
  final windGust = speedUnits.valueToString(current.windGust ?? 0.0, 2);

  stdout.write('''
=====–°–µ–≥–æ–¥–Ω—è=====
${date?.day}.${date?.month}.${date?.year} ${date?.hour}—á:${date?.minute}–º
${current.weatherDescription}
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ $temp ${tempUnits.abbr}, –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ $tempFeelsLike ${tempUnits.abbr}
–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ - $windSpeed ${speedUnits.abbr}, –ø–æ—Ä—ã–≤—ã –¥–æ $windGust ${speedUnits.abbr}
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: ${SideOfTheWorld.fromDegrees(current.windDegree!).name}
–î–∞–≤–ª–µ–Ω–∏–µ  ( ${pressureUnits.valueToString(current.pressure!)} ${pressureUnits.abbr} )
–í–ª–∞–∂–Ω–æ—Å—Ç—å ( ${current.humidity} % )
–£–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å ( ${current.uvi} )
–í–æ—Å—Ö–æ–¥ –∏ –∑–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞   ( ${current.sunrise} --> ${current.sunset} )
=================
''');
}
